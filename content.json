{"pages":[],"posts":[{"title":"在ubuntu上从零搭建node.js + nginx + mongodb环境","text":"说到后端开发环境，最有名的莫过于LAMP和LNMP，最近由于node.js的强势崛起，越来越多的后端开发也开始试水node.js了。我最近也因为各种原因，前前后后总够构建了好几台node.js + nginx + mongodb的Linux服务器。 首先关于Linux服务器，比起CentOS来说，我更加喜欢ubuntu一点。所以无论是阿里云还是一些海外的vps服务器上，我也倾向选用ubuntu服务器，本贴也是基于ubuntu服务器里说明的。 1.开始前的一些准备首先还是需要刷新一下ubuntu的包索引并安装build-essential和libssl-dev这2个包以及curl这个工具。 123sudo apt-get updatesudo apt-get install build-essential libssl-devsudo apt-get isntall curl 2.安装node.js关于安装node.js这一点，我不是很推荐使用apt-get 来安装node.js的环境。主要是因为node.js和io.js合并以后，版本迭代速度相当频繁(主要还是因为更多ES6的特性得到了支持）。今后很有可能会有在一台服务器上使用不同版本的node.js的需求。 这里推荐一个管理不同版本node.js的工具：nvm，官网: https://github.com/creationix/nvm 。安装nvm，如果前面你安装了curl的话可以 1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash 如果没有按照curl的话，也可以使用wget来进行安装 1wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash 然后nvm就会自动安装到home目录下面的.nvm目录里，并会在.bashrc里自动添加nvm的环境变量。为了让环境变量生效，最简单的方法就是通过ssh或是telnet重新连接你的服务器。 安装完nvm后，就可以通过nvm来安装指定版本的node.js了。 12345# 列出可以安装的node版本号nvm ls-remote# 安装指定版本的node (当前最新版本为v5.7.1, LTS版是v4.3.2)nvm install v4.3.2 3.安装nginx由于ubuntu源（尤其是阿里云的源）上的nginx经常不是最新的，如果需要安装最新版本nginx的时候需要手动添加nginx的源。 1234567891011# 添加nginx的mainline仓库cd /tmp/ && wget http://nginx.org/keys/nginx_signing.keysudo apt-key add nginx_signing.key# 编辑/etc/apt/sources.list.d/nginx.list 添加下面2行内容，井号不需要# deb http://nginx.org/packages/mainline/ubuntu/ ubuntu代号 nginx# deb-src http://nginx.org/packages/mainline/ubuntu/ ubuntu代号 nginxsudo vi /etc/apt/sources.list.d/nginx.list# 更新源，并安装nginxsudo apt-get update && sudo apt-get install nginx 在编辑/etc/apt/sources.list.d/nginx.list的时候需要注意，“ubuntu代号”需要根据ubuntu服务器的版本不同手动调整的，比如14.04是trusty。通过下面的命令可以获取ubuntu的代号。 1lsb_release -cs 4.安装mongodb同样和nginx有同样的问题，要安装最新3.2版本的mongodb也需要手动添加ubuntu的源。 1234567891011# 导入mongodb的public keysudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927# 生成mongodb的源listecho \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list# 更新源sudo apt-get update# 安装最新版本的mongodbsudo apt-get install -y mongodb-org 以上一台node.js + nginx + mongodb的ubuntu服务器就完成了。","link":"/2019/12/09/hot-to-install-nodejs-nginx-mongodb-on-ubuntu/"},{"title":"阿里云Kubernetes上线踩坑记","text":"12Update:2020-04-08 增加istio-ingressgateway高可用的设置 最近公司因为项目需要，在阿里云上部署了一个Kubernetes集群。虽然阿里云的文档说的还算细致，但是还是有些没有明确说明的细节。 1. 购买篇申请项目预算的时候，只考虑到Worker节点，1个SLB节点以及域名和证书的预算。但是实际购买的时候发现还有许多额外的开销。 1.1 SNAT这个和EIP一并购买，可以方便通过公网使用kubectl访问集群。关于SNAT网关至今不是很明白需要购买这个服务的意义何在，只是为了一个EIP来访问集群吗？ 1.2 Ingress这个选上了后，阿里云会给你买个SLB而且还是带公网访问的，如果你后期考虑使用Istio的话，建议你集群创建后，直接停止这个SLB，以免产生额外的费用。 1.3 日志服务通过阿里云的日志服务来收集应用的的日志，挺好用的。但是另外收费，如果有能力的自建日志服务的可不购买。 2. Istio阿里云的Kubernetes集群完美集成了Istio，根据向导就能很简单的部署成功。 2.1 额外的SLBIstio的Gateway 需要绑定一个新的SLB，和Ingress的SLB不能是同一个，又是一笔额外的开销 2.2 集群外访问这个在阿里云的Istio FAQ中有提到，按照指导很容易解决 2.2 SLB的443监听为了方便443端口的证书绑定，我们直接删除了SLB上原有的443监听(TCP协议), 重新建了一个443监听(HTTPS协议)，指向和80端口同样的虚拟服务器组。但是设置健康检查时一直出错，经过排查发现SLB健康检查发送的请求协议是HTTP 1.0的，Istio的envoy直接反悔了426(Upgrade Required)这个状态码，所以我们无奈只能把健康检查的检查返回状态改为http_4xx，这样就能通过SLB的健康检查了。 2.3 istio-ingressgateway的高可用istio-ingressgateway要达成高可用，只需要增加通过伸缩POD就可以实现，于istio-ingressgateway对应的SLB中的虚拟服务器组也会自动增加，完全不需要进行额外的手动设定。 由于istio-ingressgateway中挂载了HPAHorizontalPodAutoscaler(简称HPA)，通常三节点的集群中最小POD数只有1台，在3节点的集群中，要实现高可用，需要手动修改HPA，增加最小POD数。 基本上现在遇到了这些坑，再有在总结吧。","link":"/2020/04/01/%E9%98%BF%E9%87%8C%E4%BA%91Kubernetes%E4%B8%8A%E7%BA%BF%E8%B8%A9%E5%9D%91%E8%AE%B0/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"node.js","slug":"node-js","link":"/tags/node-js/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"mongodb","slug":"mongodb","link":"/tags/mongodb/"},{"name":"Aliyun","slug":"Aliyun","link":"/tags/Aliyun/"},{"name":"Kubernetes","slug":"Kubernetes","link":"/tags/Kubernetes/"}],"categories":[{"name":"后端","slug":"后端","link":"/categories/%E5%90%8E%E7%AB%AF/"},{"name":"Cloud","slug":"后端/Cloud","link":"/categories/%E5%90%8E%E7%AB%AF/Cloud/"}]}