<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>西门闲话</title>
  
  <subtitle>旧居魔都西门外，年岁不大酷爱吹牛，故曰西门闲话</subtitle>
  <link href="https://hashmaparraylist.github.io/rss2.xml" rel="self"/>
  
  <link href="https://hashmaparraylist.github.io/"/>
  <updated>2022-09-23T10:21:35.933Z</updated>
  <id>https://hashmaparraylist.github.io/</id>
  
  <author>
    <name>Sebastian Qu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AKS中重写规则踩坑小记录</title>
    <link href="https://hashmaparraylist.github.io/2022/09/23/AKS%E4%B8%AD%E9%87%8D%E5%86%99%E8%A7%84%E5%88%99%E8%B8%A9%E5%9D%91%E5%B0%8F%E8%AE%B0%E5%BD%95/"/>
    <id>https://hashmaparraylist.github.io/2022/09/23/AKS%E4%B8%AD%E9%87%8D%E5%86%99%E8%A7%84%E5%88%99%E8%B8%A9%E5%9D%91%E5%B0%8F%E8%AE%B0%E5%BD%95/</id>
    <published>2022-09-23T05:51:49.000Z</published>
    <updated>2022-09-23T10:21:35.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在做标准产品在不同云平台中的部署验证，有幸体验了一下微软的Azure。负责采购的运维部门这次采用了<code>Application Gateway</code>来搭配<code>AKS</code>(<code>Azure Kubernetes Service</code>)对外暴露服务，正好借着这个机会来体验一下<code>Application Gateway</code>。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ol><li>域名<code>api.demo.com</code>指向<code>Application Gateway</code>的IP地址</li><li>在<code>AKS</code>内部2个Service, <code>gateway-service</code>和<code>backend-service</code>分别需要通过<code>Application Gateway</code>对外暴露。</li><li><code>/gateway/</code>指向<code>gateway-service</code>, 然后<code>/backend/</code>指向<code>backend-service</code>。而且两个Service都没有context-path，所以需要做一个Rewrite重写URI到Service的根目录上。</li></ol><h1 id="定义重写集"><a href="#定义重写集" class="headerlink" title="定义重写集"></a>定义重写集</h1><p>打开<code>AKS</code>对应的应用程序网关<code>设置</code> &gt; <code>重写</code>。选择<code>添加重写集</code>。在<code>1. 名称和关联</code>这个Tab上只需要填写名称这项即可(名称后面在做ingress时需要使用), <code>关联的传递规则</code>不需要选择。<code>2. 重写规则配置</code>里添加一个重写规则，然后填上重写规则的名称，并添加条件(默认新建重写规则时，只会生成操作，不会生成条件)</p><h2 id="条件做如下设置"><a href="#条件做如下设置" class="headerlink" title="条件做如下设置"></a><code>条件</code>做如下设置</h2><ul><li><strong>要检查的变量类型</strong> : <code>服务器变量</code></li><li><strong>服务器变量</strong>: <code>request_uri</code></li><li><strong>区分大小写</strong>: <code>否</code> </li><li><strong>运算符</strong>: <code>等号(=)</code></li><li><strong>要匹配的模式</strong>: <code>/(gateway|backend)/?(.*)</code></li></ul><h2 id="操作做如下设置"><a href="#操作做如下设置" class="headerlink" title="操作做如下设置"></a><code>操作</code>做如下设置</h2><ul><li><strong>重写类型</strong>: <code>URL</code></li><li><strong>操作类型</strong>: <code>设置</code></li><li><strong>组件</strong>: <code>URL路径和URL查询字符串</code></li><li><strong>URL路径值</strong>: <code>/&#123;var_request_uri_2&#125;</code></li><li><strong>重新计算路径映射</strong>: <code>不选中</code></li><li><strong>URL查询字符串值</strong>: <code>留空不设值</code></li></ul><h2 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h2><p><code>操作</code>里的<code>URL路径值</code>不能使用正则表达式GROUP替换组，例如<code>$1</code>和<code>$2</code>之类的。Azure自己定义了一套对应的替换组命名规则。具体可以参考这个网页<a href="https://docs.azure.cn/zh-cn/application-gateway/rewrite-http-headers-url">使用应用程序网关重写 HTTP 标头和 URL</a>。</p><p>另外一个需要注意一点，如果在<code>条件</code>里选择了<code>服务器变量</code>的<code>request_uri</code>的时候，注意这个<code>request_uri</code>是完整的原始请求URI(携带了查询参数)。例如: 在请求<code>http://api.demo.com/gateway/search?foo=bar&amp;hello=world</code>中，<code>request_uri</code>的值将为<code>/gateway/search?foo=bar&amp;hello=world</code>。由于<code>request_uri</code>里包含了查询参数，所以在<code>操作</code>的<code>组件</code>中建议勾选<code>URL路径和URL查询字符串</code>。如果只选择<code>URL路径</code>的情况下可能出现无法预期的错误。以我们上述的配置来说明。</p><p>对象URL: <code>http://api.demo.com/gateway/search?foo=bar&amp;hello=world</code></p><table><thead><tr><th><strong>组件</strong></th><th><code>URL路径和URL查询字符串</code></th><th><code>URL路径</code></th></tr></thead><tbody><tr><td><strong>结果</strong></td><td><code>/search?foo=bar&amp;hello=world</code></td><td><code>/search?foo=bar&amp;hello=world?foo=bar&amp;hello=world</code></td></tr></tbody></table><h1 id="ACK的Ingress设置"><a href="#ACK的Ingress设置" class="headerlink" title="ACK的Ingress设置"></a><code>ACK</code>的Ingress设置</h1><p>当选择了<code>Application Gateway</code>作为对外暴露Service的方式时，Kubernetes集群里(<code>kube-system</code>命名空间里)多一个<code>Application Gateway Ingress Controller</code>(Azure工单时通常会简称为<code>agic</code>)的Deployment,所以对外暴露服务时可以像传统<code>nginx ingress controller</code>一样添加一个<code>Ingress</code>对象即可(甚至配置也和ngic大致相同，只是多了2个annotations)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="comment"># 这里指定重写规则集(不是重写规则的名字)</span></span><br><span class="line">    <span class="attr">appgw.ingress.kubernetes.io/rewrite-rule-set:</span> <span class="string">rule-backend</span></span><br><span class="line">    <span class="comment"># 指定说明你这里ingress的类型是agic</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">azure/application-gateway</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backend-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">api.demo.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">gateway-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/gateway/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">backend-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/backend/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由于微软云这块文档有部分缺失，导致在配置这块花了一点时间去排查，甚至开了工单。总结下来Ingress的配置主要是根据请求路径路由到对应的Service，重写规则集才是实际负责根据正则来进行匹配重写。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在做标准产品在不同云平台中的部署验证，有幸体验了一下微软的Azure。负责采购的运维部门这次采用了&lt;code&gt;Application G</summary>
      
    
    
    
    <category term="后端" scheme="https://hashmaparraylist.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Cloud" scheme="https://hashmaparraylist.github.io/categories/%E5%90%8E%E7%AB%AF/Cloud/"/>
    
    
    <category term="Aliyun" scheme="https://hashmaparraylist.github.io/tags/Aliyun/"/>
    
    <category term="Kubernetes" scheme="https://hashmaparraylist.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Kubernetes环境下使用Jasypt</title>
    <link href="https://hashmaparraylist.github.io/2021/09/29/Spring-Cloud-Kubernetes%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8Jasypt/"/>
    <id>https://hashmaparraylist.github.io/2021/09/29/Spring-Cloud-Kubernetes%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8Jasypt/</id>
    <published>2021-09-29T03:28:11.000Z</published>
    <updated>2022-09-23T10:21:35.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近半年着手开始做了基于微服务的中台项目，整个项目的技术栈采用的是<code>Java</code> + <code>Spring Cloud</code> + <code>Kubernetes</code> + <code>Istio</code>。</p><p>业务开放上还是相当顺利的。但是在安全审核上，运维组提出了一个简易。现在项目一些敏感配置，例如MySQL用户的密码，Redis的密码等现在都是明文保存在Kubernetes的ConfigMap中的(是的，我们并没有Nacos作为微服务的配置中心)。这样可能存在安全隐患。</p><h1 id="首次尝试"><a href="#首次尝试" class="headerlink" title="首次尝试"></a>首次尝试</h1><p>既然有问题，那就解决问题。要给配置文件中的属性项目加密很简单，稍微Google一下，就有现成的方案了。</p><p>现在比较常用的解决方案就是集成<code>Jasypt</code>,然后通过<code>jasypt-spring-boot-starter</code>来融合进Spring。</p><h3 id="POM包加入jasypt-spring-boot-starter"><a href="#POM包加入jasypt-spring-boot-starter" class="headerlink" title="POM包加入jasypt-spring-boot-starter"></a>POM包加入<code>jasypt-spring-boot-starter</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Dockerfile中增加java参数"><a href="#Dockerfile中增加java参数" class="headerlink" title="Dockerfile中增加java参数"></a>Dockerfile中增加java参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ENTRYPOINT [&quot;sh&quot;,&quot;-c&quot;,&quot;java $JAVA_OPTS -jar app.jar --jasypt.encryptor.password&#x3D;helloworld $PARAMS&quot;]</span><br></pre></td></tr></table></figure><h3 id="在ConfigMap中添加加密属性"><a href="#在ConfigMap中添加加密属性" class="headerlink" title="在ConfigMap中添加加密属性"></a>在ConfigMap中添加加密属性</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">application.yaml:</span> <span class="string">|-</span></span><br><span class="line">    <span class="attr">test2:</span> <span class="string">ENC(94Y7Ds3+RKraxQQlura9sDx+9yF0zDLMGMwi2TjyCFZOkkHfreRFSb6fxbyvCKs7)</span></span><br></pre></td></tr></table></figure><h3 id="利用actuator接口测试"><a href="#利用actuator接口测试" class="headerlink" title="利用actuator接口测试"></a>利用<code>actuator</code>接口测试</h3><p>在<code>management.endpoints.web.exposure.include</code>属性中增加<code>env</code>，这样我们就可以通过调用<code>/actuator/env</code>来查看一下<code>env</code>接口返回的整个Spring 容器中所有的PropertySource。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;propertySources&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bootstrapProperties-configmap.demo.default&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;test2&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;Hello,world&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK, 这下配置项已经加密了。问题解决了。</p><p>但是…</p><h2 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h2><p>自从项目集成了<code>Jayspt</code>以后，出现了一个奇怪的问题。每次项目试图通过修改ConfigMap的配置文件，然后试图通过<code>spring-cloud-starter-kubernetes-fabric8-config</code>来做自动Reload，都失败了。然而查阅应用日志，并没有出现任何异常。无奈只能打开<code>spring-cloud</code>和<code>jasypt-spring-boot</code>的<code>DEBUG</code>日志。</p><p>进过几天对日志和两边源代码的分析。终于找到了原因</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在Spring Boot启动时<code>jasypt-spring-boot</code>会将下面6种配置(并不仅限与这6种配置文件)</p><ul><li><code>Classpath</code>下的<code>application.yaml</code></li><li><code>Classpath</code>下的<code>bootstrap.yaml</code></li><li>集群里名称为<code>$&#123;spring.cloud.kubernetes.config.name&#125;</code>的ConfigMap</li><li>集群里名称为<code>$&#123;spring.cloud.kubernetes.config.name&#125;-kubernetes</code>的ConfigMap</li><li>Java启动参数</li><li>环境变量</li></ul><p>转换成<code>jasypt-spring-boot</code>自己的PropertySource实现类<code>EncryptableMapPropertySourceWrapper</code>。</p><p>但是如果使用Kubernetes的ConfigMap来作微服务配置中心的时候，Spring Cloud会在<code>ConfigurationChangeDetector</code>中查找配置类<code>org.springframework.cloud.bootstrap.config.BootstrapPropertySource</code>, 并依据<code>BootstrapPropertySource</code>的类型来判断容器内的配置与集群中ConfigMap里的配置是否有差异,来触发配置reload。</p><p>由于<code>jasypt-spring-boot</code>已经将所有的配置文件转型成了<code>EncryptableMapPropertySourceWrapper</code>, 所以<code>ConfigurationChangeDetector</code>无法找到<code>BootstrapPropertySource</code>所以会一直任务ConfigMap的里的配置没有变化，导致整个Reload失效(无论是使用polling还是event方式)</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>为了保证ConfigMap变化后自动Reload的功能，所以<code>jasypt-spring-boot</code>不能把<code>BootstrapPropertySource</code>转换成<code>EncryptableMapPropertySourceWrapper</code></p><p>所以我们需要设置<code>jasypt.encryptor.skip-property-sources</code>配置项, Classpath中的application.yaml需要增加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">skip-property-sources:</span> <span class="string">org.springframework.cloud.bootstrap.config.BootstrapPropertySource</span></span><br></pre></td></tr></table></figure><p><code>skip-property-sources</code>配置项配置后，加密项目就不能配置在ConfigMap里了，毕竟已经被我们忽略了。那么我们只能另外找一个PropertySource来存放加密项目了。</p><p><code>Classpath</code>中的两个Yaml由于编译时会被Maven打包进Jar文件，会牵涉多个CI/CD多个流程显然不合适，启动参数配置项的也要影响到Docker镜像制作这个流程。所以判断下来最适合的PropertySource就是环境变量了。</p><h3 id="环境变量增加加密项"><a href="#环境变量增加加密项" class="headerlink" title="环境变量增加加密项"></a>环境变量增加加密项</h3><p>在Kubernetes的部署Yaml中，添加加密数据项<code>application.test.str</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TZ</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">application.test.str</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&gt;-</span></span><br><span class="line">                <span class="string">ENC(94Y7Ds3+RKraxQQlura9sDx+9yF0zDLMGMwi2TjyCFZOkkHfreRFSb6fxbyvCKs7)</span></span><br><span class="line">    <span class="string">....</span></span><br></pre></td></tr></table></figure><p>如果需要更加严密的加密方针的话，我们可以把环境变量的内容放进Kubernetes的Secrets中。</p><h3 id="在ConfigMap中引用application-test-str"><a href="#在ConfigMap中引用application-test-str" class="headerlink" title="在ConfigMap中引用application.test.str"></a>在ConfigMap中引用<code>application.test.str</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">application.yaml:</span> <span class="string">|-</span></span><br><span class="line">    <span class="attr">test2:</span> <span class="string">ENC(94Y7Ds3+RKraxQQlura9sDx+9yF0zDLMGMwi2TjyCFZOkkHfreRFSb6fxbyvCKs7)</span></span><br><span class="line">    <span class="attr">test3:</span> <span class="string">$&#123;application.test.str&#125;</span></span><br></pre></td></tr></table></figure><h3 id="通过actuator接口来测试"><a href="#通过actuator接口来测试" class="headerlink" title="通过actuator接口来测试"></a>通过<code>actuator</code>接口来测试</h3><p>通过<code>actuator\env</code>接口来测试一下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;propertySources&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bootstrapProperties-configmap.demo.default&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;test2&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;ENC(94Y7Ds3+RKraxQQlura9sDx+9yF0zDLMGMwi2TjyCFZOkkHfreRFSb6fxbyvCKs7)&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;test3&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;Hello,world&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样ConfigMap中的配置项<code>test3</code>就可以通过环境变量引用并使用加密配置项了。同时修改ConfigMap依然可以触发auto reload了。这下终于算是解决了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近半年着手开始做了基于微服务的中台项目，整个项目的技术栈采用的是&lt;code&gt;Java&lt;/code&gt; + &lt;code&gt;Spring Clou</summary>
      
    
    
    
    <category term="后端" scheme="https://hashmaparraylist.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://hashmaparraylist.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://hashmaparraylist.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>重学Java (一) 泛型</title>
    <link href="https://hashmaparraylist.github.io/2021/03/15/%E9%87%8D%E5%AD%A6Java-%E4%B8%80-%E6%B3%9B%E5%9E%8B/"/>
    <id>https://hashmaparraylist.github.io/2021/03/15/%E9%87%8D%E5%AD%A6Java-%E4%B8%80-%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-03-15T08:01:46.000Z</published>
    <updated>2022-09-23T10:21:35.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>泛型编程自从 Java 5.0 中引入后已经超过15个年头了。对于现在的 Java 码农来说熟练使用泛型编程已经是家常便饭的事情了。所以本文就在不对泛型的基础使用在做说明了。 如果你还不会使用泛型的话，可以参考下面两个链接</p><ul><li><a href="https://blog.csdn.net/qq_24084925/article/details/68491132">Java 泛型详解</a></li><li><a href="https://docs.oracle.com/javase/tutorial/java/generics/index.html">The Java™ Tutorials (Lesson: Generics)</a></li></ul><p>这篇文章就简答聊一下，我实际在开发工作中很少用的到泛型方法这个知识点，以及在实际项目中有哪些东西会使用到泛型。</p><h2 id="2-泛型方法"><a href="#2-泛型方法" class="headerlink" title="2. 泛型方法"></a>2. 泛型方法</h2><p>在阅读代码的时候我们经常会看到下面这样的方法 (这段代码摘自 <code>java.util.AbstractCollection</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">    <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">    <span class="keyword">int</span> size = size();</span><br><span class="line">    T[] r = a.length &gt;= size ? a :</span><br><span class="line">              (T[])java.lang.reflect.Array</span><br><span class="line">              .newInstance(a.getClass().getComponentType(), size);</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! it.hasNext()) &#123; <span class="comment">// fewer elements than expected</span></span><br><span class="line">            <span class="keyword">if</span> (a == r) &#123;</span><br><span class="line">                r[i] = <span class="keyword">null</span>; <span class="comment">// null-terminate</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.length &lt; i) &#123;</span><br><span class="line">                <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.arraycopy(r, <span class="number">0</span>, a, <span class="number">0</span>, i);</span><br><span class="line">                <span class="keyword">if</span> (a.length &gt; i) &#123;</span><br><span class="line">                    a[i] = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        r[i] = (T)it.next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// more elements than expected</span></span><br><span class="line">    <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么 <code>pulic</code> 关键字后面的那个 <code>&lt;T&gt;</code> 就是用来标记这个方法是一个泛型方法。 那什么是泛型方法呢。</p><p>官方的解释是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generic methods are methods that introduce their own type parameters. This is similar to declaring a generic type, but the type parameter&#39;s scope is limited to the method where it is declared. Static and non-static generic methods are allowed, as well as generic class constructors.</span><br></pre></td></tr></table></figure><p>通俗点来将就是将一个方法泛型化，让一个普通的类的某一个方法具有泛型功能。 如果在一个泛型类中增加一个泛型方法，那这个泛型方法就可以有一套独立于这个类的泛型类型。</p><p>通过一个简单的例子, 我们来看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GenericClass 这个泛型类是一个简单的套皮的 HashMap</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, V&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 泛型方法 genericMethod 可以接受一个全新的、作用域只限本函数的泛型类型T</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">genericMethod</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际使用起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GenericClass&lt;String, Integer&gt; map = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line"><span class="comment">// put 和 get 方法的参数必须使用定义时指定的 String 和 Integer</span></span><br><span class="line">System.out.println(map.put(<span class="string">&quot;One&quot;</span>, <span class="number">1</span>));</span><br><span class="line">System.out.println(map.get(<span class="string">&quot;One&quot;</span>));</span><br><span class="line"><span class="comment">// 泛型方法 genericMethod 就可以接受一个 String 和 Integer 以外的类型</span></span><br><span class="line">System.out.println(map.genericMethod(<span class="keyword">new</span> Double(<span class="number">1.0</span>)).getClass());</span><br></pre></td></tr></table></figure><p>我们再来看看 JDK 中使用到泛型方法的例子。我们最常使用的泛型容器 <code>ArrayList</code> 中有个 <code>toArray</code> 方法。JDK 在它的实现中就提供了两个版本，其中一个就是泛型方法的版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 这是一个普通版本，返回一个Object的数组</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这是一个泛型方法的版本，将容器里存储的元素输出到 T[] 数组中。 其中 T 必须是 E 的父类，否则 System.arraycopy 会抛出 ArrayStoreException 异常      </span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            <span class="comment">// Make a new array of a&#x27;s runtime type, but my contents:</span></span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型方法总体上来说就是可以给与现有的方法实现上，增加一个更加灵活的实现可能。</p><h2 id="3-实战应用"><a href="#3-实战应用" class="headerlink" title="3. 实战应用"></a>3. 实战应用</h2><p>在实际的项目中，对于泛型的使用，除了像倾倒垃圾一样往泛型容易里塞各种 java bean 和其他泛型对象。还能怎么使用泛型呢？</p><p>我们在实际的一些项目中，会对数据库中的一些表(多数时候是全部)先实现 CRUD (Create, Read, Update, Delete)的操作，并从这些操作中延伸出一些简单的 REST 风格的 WebAPI 接口，然后才会根据实际业务需要实现一些更复杂的业务接口。 </p><p>大体上会是下面这个样子。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 这是一个简单的 Entity 对象</span></span><br><span class="line"><span class="comment">// 通常现在的 Java 应用都会使用到 Lombok 和 Spring Boot</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后这个是 DAO 接口继承自 spring-data 的 JpaRepository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在来是一个访问 User 资源的 Service 和他的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Optional&lt;User&gt; <span class="title">findById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">save</span> <span class="params">(User user)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSerivceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;User&gt; <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后就是 WebAPI 的接口了</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(userService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">fetch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 由于是示例这里就不考虑没有数据的情况了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userService.findById(id);</span><br><span class="line">        <span class="keyword">this</span>.userService.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致一个表的一套相关接口就是这个样子的。如果你的数据库中有大量表的话，而且每个表都需要提供 REST 风格的 WebAPI 接口的话，那么这将是一个相当枯燥的而又及其容易出错的工作。</p><p>为了不让这项枯燥而又容易犯错的工作占去我们宝贵的私人时间，我们可以通过泛型和继承的技巧来重构从 Service 层到 Controller 的这段代码(感谢 spring-data 提供了 <code>JpaRepository</code>, 让我们不至于从 DAO 层重构)</p><h2 id="3-1-Service-层的重构"><a href="#3-1-Service-层的重构" class="headerlink" title="3.1 Service 层的重构"></a>3.1 Service 层的重构</h2><p>首先是 Service 接口的重构，我们 Service 层接口就是定义了一组 CRUD 的操作，我们可以将这组 CRUD 操作抽象到一个父接口，然后所有 Service 层的接口都将继承自这个父接口。而接口中出现的 Entity 和主键的类型(上例中 User 的主键 id 的类型是 Long)就可以用泛型来展现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里泛型表示 E 来指代 Entity, ID 用来指代 Entity 主键的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICrudService</span>&lt;<span class="title">E</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;E&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Optional&lt;E&gt; <span class="title">findById</span><span class="params">(ID id)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">save</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(ID id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后 Service 层的接口，就可以简化成这样</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">ICrudService</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样 Service 层的实现也可以使用相似的方法具体实现可以抽象到一个基类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相比 ICrudService 这里有多了一个泛型 T 来代表 Entity 对应的 DAO, 我们的每一个 DAO 都继承自</span></span><br><span class="line"><span class="comment">// spring-data 的 JpaRepository 所以，这里可以使用到泛型的边界</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCrudService</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">E</span>, <span class="title">ID</span>&gt;, <span class="title">E</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T dao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractCrudService</span><span class="params">(T dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;E&gt; <span class="title">findById</span><span class="params">(ID id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">save</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dao.save(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(ID id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那 Service 的实现类可以简化成这样</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">AbstractCrudService</span>&lt;<span class="title">UserDao</span>, <span class="title">User</span>, <span class="title">Long</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        supper(dao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样我们可以通过相同的方法来对 Controller 层进行重构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Controller 层的基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCrudController</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">ICrudService</span>&lt;<span class="title">E</span>, <span class="title">ID</span>&gt;, <span class="title">E</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T service;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractCrudController</span><span class="params">(T service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">fetch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.service.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> ID id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 由于是示例这里就不考虑没有数据的情况了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.service.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.service.save(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.service.save(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> ID id)</span> </span>&#123;</span><br><span class="line">        E e = <span class="keyword">this</span>.service.findById(id).get();</span><br><span class="line">        <span class="keyword">this</span>.service.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体的 WebAPI</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">AbstractCrudController</span>&lt;<span class="title">UserService</span>, <span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(UserService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(service);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过重构可以消减掉 Servcie 和 Controller 中的大量重复代码，使代码更容易维护了。</p><h2 id="4-结尾"><a href="#4-结尾" class="headerlink" title="4. 结尾"></a>4. 结尾</h2><p>关于泛型就简单的说这些了，泛型作为 Java 日常开发中一个常用的知识点，其实还有很多知识点可以供我们挖掘，奈何本人才疏学浅，这么多年工作下来，只积累出来这么点内容。</p><p>文末放上示例代码的代码库: </p><ul><li><a href="https://github.com/hashmaparraylist/re-study-java">GitHub入口</a></li><li><a href="https://gitee.com/hashmaparraylist/re-study-java">gitee入口</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;泛型编程自从 Java 5.0 中引入后已经超过15个年头了。对于现在的 Java 码农来说熟练使用泛型编程已经是家常便</summary>
      
    
    
    
    <category term="后端" scheme="https://hashmaparraylist.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="java" scheme="https://hashmaparraylist.github.io/tags/java/"/>
    
    <category term="generic" scheme="https://hashmaparraylist.github.io/tags/generic/"/>
    
  </entry>
  
  <entry>
    <title>2020年阅读总结</title>
    <link href="https://hashmaparraylist.github.io/2020/12/29/2020%E5%B9%B4%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/"/>
    <id>https://hashmaparraylist.github.io/2020/12/29/2020%E5%B9%B4%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-29T02:45:41.000Z</published>
    <updated>2022-09-23T10:21:35.933Z</updated>
    
    <content type="html"><![CDATA[<p>多灾多难的2020年已经没有几天了，整个2020年要说还真是像一记刹车，去年很多想法，计划都有因为疫情原因搁置了。平时的生活更是从宅家变成了重度宅家的状态，自然就多出了许多大段大段的连续时间，可以用来好好玩玩大作，看看小说。仔细盘点一下今年总共看了10本小说外加2本科普书籍( <a href="https://github.com/hashmaparraylist/ReadList/blob/master/ReadList2020.md">2020年阅读书单</a><br>)，算是自2018年以来读书最多的一个年份了。其中不乏拖了近3年的那本《西方文化中的数学》。接着就来絮叨絮叨今年看的这12本书吧。</p><hr><blockquote><p>《莱博维茨的赞歌》</p></blockquote><p>第一次被安利《莱博维茨的赞歌》的机核的电台节目<a href="https://www.gcores.com/radios/16773">辐射－视觉、音乐以及文学</a>, 当时听完节目就相当好奇，可以被一部载入史册的CRPG游戏誉为精神文本的小说到底是个什么样子的。但是当时新星版的译本几乎就是绝本了，某鱼的二手价也要已经飙到了3位数。直到今年年初在核市节目上听到了中信版译本的消息,才有机会买来拜读。</p><p>全书通过3个故事讲述了核战灭世后莱博维茨修道院从保卫文明，到重建，然后看着文明再度毁灭的故事。各种无不透露着辐射那股 <code>War, War never changed</code>的味道。</p><blockquote><p>《占星术杀人事件》《屋顶上的小丑》《亿男》</p></blockquote><p>这3本书都是2019年上海书展上买的。前两本都是岛田庄司的推理名篇，其中《占星术杀人事件》在本格派推理史上有着非凡的地位，各种被抄袭从未被超越过。《屋顶上的小丑》要是最吸引人的话就是多线叙事，每条线都掐在恰如其分的地方。《亿男》则是挂着悬疑羊头卖着人生哲理。</p><blockquote><p>《神经漫游者》</p></blockquote><p>威廉吉布森的蔓生三部曲之一，开创了赛博朋克的科幻流派，说实话这本书我看的很痛苦，很多地方实在读不懂，到现在我还是不明白那些无法读懂的地方到底是原著如此，还是翻译的不行，亦或者是Kindle版排版太烂了。</p><blockquote><p>《神们自己》，《神的九十亿个名字》</p></blockquote><p>阿瑟克拉克的中篇小说和短篇小说集，这两本书阅读体验奇佳，尤其是在读完《神经漫游者》后，虽然三本书被Amazon打在同一个包里来卖的，但是光从排版上就比《神经漫游者》高出不少，所以才会有我对后者排版问题的质疑。</p><p>《神们自己》三线叙事，讲述了2个平行宇宙中的2个物种在能源，种族存续，家庭伦理上的各种讨论和故事。 《神的九十亿个名字》作为短篇小说集收录了好几篇风格题材迥异的小说，花上十几分钟读上一个故事是相当惬意的。</p><blockquote><p>《佐伊的战争》 《人类决裂》 《万物的终结》</p></blockquote><p>约翰斯卡尔齐的《老人的战争》系列的后3部，前三部大概是3，4年前读的吧，在这个宇宙观里最吸引人的设定就绿皮的人类防卫军战士，以及跨种族间的政治斗争。系列的六本书相当于在这个大设定下讲的六个故事。每个故事虽说都是独立的故事，但是前后皆有关联，而且最重要的就是每本的长度都算不上很长，相当适合于一口气读完。</p><blockquote><p>《西方文化中的数学》</p></blockquote><p>这本书大概是从2017年开始读的，当时意气奋发觉得对于理科生出身的我，书中内容应该很好理解，没想到最后不光是文化还是数学读的都是一知半解。只能说自大了。</p><blockquote><p>《一想到还有95%的问题留给人类，我就放心了》</p></blockquote><p>大概是18年还是19年前后对量子物理和宇宙物理开始有了兴趣，虽然各中理论并不是很了解，但是仍然很好奇的买了这本书，全书插画相当有趣，同时使用浅显易懂的语言来解释各种复杂的物理现象，以及当今人类物理知识的边界。强烈推荐给想假装成学霸的朋友。</p><hr><blockquote><p>2021年读什么</p></blockquote><p>具体读啥还没想好基本上还是以科幻和悬疑为主，但是肯定会读的应该有海明威的《丧钟为谁而鸣》和小林泰三的《醉步男》吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;多灾多难的2020年已经没有几天了，整个2020年要说还真是像一记刹车，去年很多想法，计划都有因为疫情原因搁置了。平时的生活更是从宅家变成了重度宅家的状态，自然就多出了许多大段大段的连续时间，可以用来好好玩玩大作，看看小说。仔细盘点一下今年总共看了10本小说外加2本科普书籍</summary>
      
    
    
    
    <category term="杂记" scheme="https://hashmaparraylist.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="阅读" scheme="https://hashmaparraylist.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Largrange项目架构与设计回顾 (二)</title>
    <link href="https://hashmaparraylist.github.io/2020/05/21/Lagrange%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE2/"/>
    <id>https://hashmaparraylist.github.io/2020/05/21/Lagrange%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE2/</id>
    <published>2020-05-21T02:49:41.000Z</published>
    <updated>2022-09-23T10:21:35.933Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2020/05/09/lagrange%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/">Largrange项目架构与设计回顾 (一)</a> 里面我讲了一下项目开始架构和技术选型的一些内容。这一章来聊聊业务设计上的这点事。</p><p>总体来说项目设计的时候,我们对业务模块的划分和拆解总体上来说都是遵循着高内聚,低耦合的原则来进行划分的。大部分和业务相关的服务,都还是能很好的进行功能划分的。但是有一些和具体业务关联性并不是很高的服务在界定与实现时出现了一些问题。</p><h2 id="任务调度服务"><a href="#任务调度服务" class="headerlink" title="任务调度服务"></a>任务调度服务</h2><p>由于平台方面会有一些控制命令下发给Android设备,而且下发的命令并不一定都是实时的,大部分都是指定一个时间来下发,所以在设计的时候就考虑到需要一个任务调度服务(以下略称<code>cron</code>),来处理这些下发指令以及未来可能会有的定时批处理任务的业务需求。技术选型的时候考虑到整个服务是构建在Kubernetes上的一个分布式的微服务架构,所以就没有选择Spring Scheduler,而是使用了Quarter来支撑整个<code>cron</code>。 </p><p>从技术选型上来说<code>cron</code>没有什么问题,但是在设计如何使用<code>cron</code>上还是有点问题的, 我们先来看看已推送服务为例,整个平台中<code>cron</code>的处理流程是怎样的。</p><ol><li><code>Platform</code> 调用 <code>cron</code>的创建定时任务Job的接口(接口的参数为推送时使用的相关参数)</li><li><code>cron</code> 创建Quartz的Job和Trigger,并将Job和Trigger的Name(Quartz中Job和Trigger的唯一标识符)返回个<code>Platform</code></li><li><code>cron</code> 在指定时间触发推送的Job,即调用<code>Push</code>服务的推送接口</li><li><code>Push</code>的推送接口调用第三方服务商的推送服务,并将第三方推送服务的调用结果返回给<code>cron</code></li><li><code>cron</code>通过调用<code>Platform</code>预留的推送服务回调地址将第三方推送服务调用接口返还给<code>Platform</code></li><li><code>Platform</code> 将第三方推送服务的调用结果留档保存,并继续业务处理</li></ol><p>设计之初考虑到不想在<code>cron</code>中牵扯到具体的业务, 所以设计了一个<code>Platform</code>的回调接口来处理推送后的具体业务处理。虽然保证了<code>cron</code>尽量减少了和业务逻辑接触与数据库的访问。但是前前后后要访问集群内部的其他微服务2次,额外增加了网络开销,以及因为网络通信造成额外的通信失败风险。而且针对每种不同的定时任务,都需要额外开发一个QuartzJobBean,很难形成统一的QuartzJobBean来进行处理。今后如果还有相似项目还是需要重新考量一下如何设计一个更加完善的定时任务。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>暂时就想到了这些东西,今后想到啥还会继续在这里补存。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在&lt;a href=&quot;/2020/05/09/lagrange%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/&quot;&gt;Largrange项目架构与设计回顾 (一)&lt;/a&gt; 里面我讲了一下项目开始架构和技术选型的一些内容。这一章来聊聊业务设计上的这点事。&lt;</summary>
      
    
    
    
    <category term="设计" scheme="https://hashmaparraylist.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="Aliyun" scheme="https://hashmaparraylist.github.io/tags/Aliyun/"/>
    
    <category term="Kubernetes" scheme="https://hashmaparraylist.github.io/tags/Kubernetes/"/>
    
    <category term="架构" scheme="https://hashmaparraylist.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="Java" scheme="https://hashmaparraylist.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Largrange项目架构与设计回顾 (一)</title>
    <link href="https://hashmaparraylist.github.io/2020/05/09/lagrange%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/"/>
    <id>https://hashmaparraylist.github.io/2020/05/09/lagrange%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/</id>
    <published>2020-05-09T02:34:47.000Z</published>
    <updated>2022-09-23T10:21:35.933Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目背景</p></blockquote><p>从去年年底开始一个老客户希望在他们的一个传统的机械设备(后面略称 <code>E机关</code> )上外装一个Android设备。 Android设备和 <code>E机关</code> 之间通过串口或是RJ45接口进行数据交互，主要是Android设备获取 <code>E机关</code> 内部的数据，并不会通过接口来控制 <code>E机关</code> 。 Android设备则通过4G 来和平台交互，上报Android设备的状态数据，同时接受平台的控制。以此来实现让传统机械设备也能拥抱物联网的概念。</p><p>最后围绕着客户的需求分成了3个项目来并行推进</p><ol><li>Android设备的硬件设备的设计、选材、样机制作与量产规划</li><li>在Android设备上,进行与<code>E机关</code>以及平台进行交互的APP开发</li><li>用于Android设备交互的平台的架构、设计与开发</li></ol><p>我们平台Team就负责 <code>3.用于Android设备交互的平台</code> 并命名Lagrange (拉格朗日) 。</p><h1 id="设计-amp-架构"><a href="#设计-amp-架构" class="headerlink" title="设计&amp;架构"></a>设计&amp;架构</h1><p>整个平台这块不仅需要向Android设备的APP提供数据交互接口，还需要有一个供相关运营人员使用的前端Web应用，以及与云平台(主要是Aliyun) 交互的功能。所以考虑到多方面使用微服务的架构来实现整个平台端。<br>由于<code>E机关</code>的工作工况不能保证长期较的稳定的连接到4G网络，所以我们并不考虑使用Socket长连接的方式来做APP和平台之间的数据交互，要实现平台对Android设备进行反控的话，只能实现推送方式来把控制命令下发给Android设备,所以还需要有一个第三方推送服务商交互的服务。同时控制推送也有实时和非实时以及定期推送的需求，所以可能还需要一个任务调度的服务。</p><p>根据对上述业务进行梳理，我们将项目分成几个服务</p><ul><li>提供Android设备的交互接口的 <code>App Service</code></li><li>提供运营人员使用前端Web应用 <code>Platform Web Service</code></li><li>前端Web应用使用到的一些接口 <code>Platform Service</code></li><li>负责第三方推送服务商交互的 <code>Push Service</code></li><li>提供云平台鉴权用的 <code>Auth Service</code></li><li>用来管理任务调度的 <code>Cron Service</code></li></ul><p>由于前一个项目实施的时候没有使用容器部署，每当访问量峰值的时候，我们这些码农兼运维就各种加班，所以这次项目决定直接将服务容器化，同时选择了<code>Kubernetes</code>来管理容器。由于客观原因线上的<code>Kubernetes</code>直接购买了Aliyun的托管版<code>Kubernetes</code>服务。 内部的开发测试环境则使用了 <code>Rancher 2.0</code> 来构建<code>Kubernetes</code>集群。</p><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><h2 id="a-后端服务选型"><a href="#a-后端服务选型" class="headerlink" title="a. 后端服务选型"></a>a. 后端服务选型</h2><p>由于不考虑长连接的原因，所以在后端服务在技术选型上基本就不考虑Netty了，直接上Spring大礼包。</p><ul><li>Spring Boot 开发接口</li><li>Spring Data 配合 JPA 来进行数据的持久化</li><li>Spring Cloud Kubenetes 来做数据的Config的autoreload</li><li>Quartz 负责处理任务调度</li></ul><p>服务之间调用都使用HTTP服务, 服务发现也有<code>Kubernetes</code>的DNS机制支持。服务网格则选择了比较成熟的<code>Istio</code>，主要还是Aliyun的<code>Kubernetes</code>可以集成<code>Istio</code>，部署和使用都相当方便。</p><h2 id="b-前端Web应用选型"><a href="#b-前端Web应用选型" class="headerlink" title="b. 前端Web应用选型"></a>b. 前端Web应用选型</h2><p>因为前端Web应用主要是给运营人员使用，所以我们考虑使用Single Page Application来做个前后端分离的Web应用。框架这块由于团队成员基本上没有什么前端开发经验，基本都是后台写Java的码农，所以框架选择有点随性，直接就点名了vue.js。前端控件库则用的是阿里系的Antd。</p><h2 id="c-数据持久层"><a href="#c-数据持久层" class="headerlink" title="c. 数据持久层"></a>c. 数据持久层</h2><p>主数据库选择了mysql，缓存用的redis。这些都是团队比较熟悉的。由于一些特殊的业务需求和使用场景，我们还加了一个mongodb来做为一个副数据库，主要存放一些特殊业务使用的数据。</p><h2 id="d-DevOps"><a href="#d-DevOps" class="headerlink" title="d. DevOps"></a>d. DevOps</h2><p>用了相当传统的GitLab CE 加上Jenkins的组合，实现前后端代码的自动编译，推送到私有的镜像仓库(使用Aliyun的镜像仓库服务)</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>以上基本是项目最早做设计时候的各种考量。暂时先写这么多，过两天再回顾一下当初设计上有哪些觉得不足的地方。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;项目背景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从去年年底开始一个老客户希望在他们的一个传统的机械设备(后面略称 &lt;code&gt;E机关&lt;/code&gt; )上外装一个Android设备。 Android设备和 &lt;code&gt;E机关&lt;/code&gt; 之间通</summary>
      
    
    
    
    <category term="设计" scheme="https://hashmaparraylist.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="Aliyun" scheme="https://hashmaparraylist.github.io/tags/Aliyun/"/>
    
    <category term="Kubernetes" scheme="https://hashmaparraylist.github.io/tags/Kubernetes/"/>
    
    <category term="架构" scheme="https://hashmaparraylist.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="Java" scheme="https://hashmaparraylist.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>阿里云Kubernetes上线踩坑记</title>
    <link href="https://hashmaparraylist.github.io/2020/04/01/%E9%98%BF%E9%87%8C%E4%BA%91Kubernetes%E4%B8%8A%E7%BA%BF%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>https://hashmaparraylist.github.io/2020/04/01/%E9%98%BF%E9%87%8C%E4%BA%91Kubernetes%E4%B8%8A%E7%BA%BF%E8%B8%A9%E5%9D%91%E8%AE%B0/</id>
    <published>2020-04-01T01:47:38.000Z</published>
    <updated>2022-09-23T10:21:35.933Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Update:</span><br><span class="line">2020-04-08 增加istio-ingressgateway高可用的设置</span><br></pre></td></tr></table></figure><p>最近公司因为项目需要，在阿里云上部署了一个Kubernetes集群。虽然阿里云的文档说的还算细致，但是还是有些没有明确说明的细节。</p><h1 id="1-购买篇"><a href="#1-购买篇" class="headerlink" title="1. 购买篇"></a>1. 购买篇</h1><p>申请项目预算的时候，只考虑到Worker节点，1个SLB节点以及域名和证书的预算。但是实际购买的时候发现还有许多额外的开销。</p><h2 id="1-1-SNAT"><a href="#1-1-SNAT" class="headerlink" title="1.1 SNAT"></a>1.1 SNAT</h2><p>这个和EIP一并购买，可以方便通过公网使用kubectl访问集群。关于SNAT网关至今不是很明白需要购买这个服务的意义何在，只是为了一个EIP来访问集群吗？</p><h2 id="1-2-Ingress"><a href="#1-2-Ingress" class="headerlink" title="1.2 Ingress"></a>1.2 Ingress</h2><p>这个选上了后，阿里云会给你买个SLB而且还是带公网访问的，如果你后期考虑使用Istio的话，建议你集群创建后，直接停止这个SLB，以免产生额外的费用。</p><h2 id="1-3-日志服务"><a href="#1-3-日志服务" class="headerlink" title="1.3 日志服务"></a>1.3 日志服务</h2><p>通过阿里云的日志服务来收集应用的的日志，挺好用的。但是另外收费，如果有能力的自建日志服务的可不购买。</p><h1 id="2-Istio"><a href="#2-Istio" class="headerlink" title="2. Istio"></a>2. Istio</h1><p>阿里云的Kubernetes集群完美集成了Istio，根据向导就能很简单的部署成功。</p><h2 id="2-1-额外的SLB"><a href="#2-1-额外的SLB" class="headerlink" title="2.1 额外的SLB"></a>2.1 额外的SLB</h2><p>Istio的Gateway 需要绑定一个新的SLB，和Ingress的SLB不能是同一个，又是一笔额外的开销</p><h2 id="2-2-集群外访问"><a href="#2-2-集群外访问" class="headerlink" title="2.2 集群外访问"></a>2.2 集群外访问</h2><p>这个在阿里云的Istio FAQ中有提到，按照指导很容易解决</p><h2 id="2-2-SLB的443监听"><a href="#2-2-SLB的443监听" class="headerlink" title="2.2 SLB的443监听"></a>2.2 SLB的443监听</h2><p>为了方便443端口的证书绑定，我们直接删除了SLB上原有的443监听(TCP协议), 重新建了一个443监听(HTTPS协议)，指向和80端口同样的虚拟服务器组。但是设置健康检查时一直出错，经过排查发现SLB健康检查发送的请求协议是HTTP 1.0的，Istio的envoy直接反悔了<code>426(Upgrade Required)</code>这个状态码，所以我们无奈只能把健康检查的检查返回状态改为http_4xx，这样就能通过SLB的健康检查了。</p><h2 id="2-3-istio-ingressgateway的高可用"><a href="#2-3-istio-ingressgateway的高可用" class="headerlink" title="2.3 istio-ingressgateway的高可用"></a>2.3 istio-ingressgateway的高可用</h2><p><code>istio-ingressgateway</code>要达成高可用，只需要增加通过伸缩POD就可以实现，于<code>istio-ingressgateway</code>对应的SLB中的虚拟服务器组也会自动增加，完全不需要进行额外的手动设定。</p><p>由于<code>istio-ingressgateway</code>中挂载了HPA<code>HorizontalPodAutoscaler</code>(简称HPA)，通常三节点的集群中最小POD数只有1台，在3节点的集群中，要实现高可用，需要手动修改HPA，增加最小POD数。</p><hr><p>基本上现在遇到了这些坑，再有在总结吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;</summary>
      
    
    
    
    <category term="后端" scheme="https://hashmaparraylist.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Cloud" scheme="https://hashmaparraylist.github.io/categories/%E5%90%8E%E7%AB%AF/Cloud/"/>
    
    
    <category term="Aliyun" scheme="https://hashmaparraylist.github.io/tags/Aliyun/"/>
    
    <category term="Kubernetes" scheme="https://hashmaparraylist.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>在ubuntu上从零搭建node.js + nginx + mongodb环境</title>
    <link href="https://hashmaparraylist.github.io/2019/12/09/hot-to-install-nodejs-nginx-mongodb-on-ubuntu/"/>
    <id>https://hashmaparraylist.github.io/2019/12/09/hot-to-install-nodejs-nginx-mongodb-on-ubuntu/</id>
    <published>2019-12-09T02:40:05.000Z</published>
    <updated>2022-09-23T10:21:35.933Z</updated>
    
    <content type="html"><![CDATA[<p>说到后端开发环境，最有名的莫过于LAMP和LNMP，最近由于node.js的强势崛起，越来越多的后端开发也开始试水node.js了。我最近也因为各种原因，前前后后总够构建了好几台node.js + nginx + mongodb的Linux服务器。</p><p>首先关于Linux服务器，比起CentOS来说，我更加喜欢ubuntu一点。所以无论是阿里云还是一些海外的vps服务器上，我也倾向选用ubuntu服务器，本贴也是基于ubuntu服务器里说明的。</p><h2 id="1-开始前的一些准备"><a href="#1-开始前的一些准备" class="headerlink" title="1.开始前的一些准备"></a>1.开始前的一些准备</h2><p>首先还是需要刷新一下ubuntu的包索引并安装build-essential和libssl-dev这2个包以及curl这个工具。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential libssl-dev</span><br><span class="line">sudo apt-get isntall curl</span><br></pre></td></tr></table></figure><h2 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2.安装node.js"></a>2.安装node.js</h2><p>关于安装node.js这一点，我不是很推荐使用apt-get 来安装node.js的环境。主要是因为node.js和io.js合并以后，版本迭代速度相当频繁(主要还是因为更多ES6的特性得到了支持）。今后很有可能会有在一台服务器上使用不同版本的node.js的需求。</p><p>这里推荐一个管理不同版本node.js的工具：nvm，官网: <a href="https://github.com/creationix/nvm">https://github.com/creationix/nvm</a>  。安装nvm，如果前面你安装了curl的话可以</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>如果没有按照curl的话，也可以使用wget来进行安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>然后nvm就会自动安装到home目录下面的.nvm目录里，并会在.bashrc里自动添加nvm的环境变量。为了让环境变量生效，最简单的方法就是通过ssh或是telnet重新连接你的服务器。</p><p>安装完nvm后，就可以通过nvm来安装指定版本的node.js了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出可以安装的node版本号</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本的node (当前最新版本为v5.7.1, LTS版是v4.3.2)</span></span><br><span class="line">nvm install v4.3.2</span><br></pre></td></tr></table></figure><h2 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3.安装nginx"></a>3.安装nginx</h2><p>由于ubuntu源（尤其是阿里云的源）上的nginx经常不是最新的，如果需要安装最新版本nginx的时候需要手动添加nginx的源。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加nginx的mainline仓库</span></span><br><span class="line"><span class="built_in">cd</span> /tmp/ &amp;&amp; wget http://nginx.org/keys/nginx_signing.key</span><br><span class="line">sudo apt-key add nginx_signing.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑/etc/apt/sources.list.d/nginx.list 添加下面2行内容，井号不需要</span></span><br><span class="line"><span class="comment"># deb http://nginx.org/packages/mainline/ubuntu/ ubuntu代号 nginx</span></span><br><span class="line"><span class="comment"># deb-src http://nginx.org/packages/mainline/ubuntu/ ubuntu代号 nginx</span></span><br><span class="line">sudo vi  /etc/apt/sources.list.d/nginx.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源，并安装nginx</span></span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>在编辑/etc/apt/sources.list.d/nginx.list的时候需要注意，“ubuntu代号”需要根据ubuntu服务器的版本不同手动调整的，比如14.04是trusty。通过下面的命令可以获取ubuntu的代号。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -cs</span><br></pre></td></tr></table></figure><h2 id="4-安装mongodb"><a href="#4-安装mongodb" class="headerlink" title="4.安装mongodb"></a>4.安装mongodb</h2><p>同样和nginx有同样的问题，要安装最新3.2版本的mongodb也需要手动添加ubuntu的源。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入mongodb的public key</span></span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成mongodb的源list</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse&quot;</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本的mongodb</span></span><br><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure><p>以上一台node.js + nginx + mongodb的ubuntu服务器就完成了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;说到后端开发环境，最有名的莫过于LAMP和LNMP，最近由于node.js的强势崛起，越来越多的后端开发也开始试水node.js了。我最近也因为各种原因，前前后后总够构建了好几台node.js + nginx + mongodb的Linux服务器。&lt;/p&gt;
&lt;p&gt;首先关于L</summary>
      
    
    
    
    <category term="后端" scheme="https://hashmaparraylist.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="ubuntu" scheme="https://hashmaparraylist.github.io/tags/ubuntu/"/>
    
    <category term="node.js" scheme="https://hashmaparraylist.github.io/tags/node-js/"/>
    
    <category term="nginx" scheme="https://hashmaparraylist.github.io/tags/nginx/"/>
    
    <category term="mongodb" scheme="https://hashmaparraylist.github.io/tags/mongodb/"/>
    
  </entry>
  
</feed>
